import org.jetbrains.kotlin.gradle.tasks.KotlinCompile

plugins {
    id 'org.springframework.boot' version '3.0.1'
    id 'io.spring.dependency-management' version '1.1.0'
    id 'org.jetbrains.kotlin.jvm' version '1.7.22'
    id 'org.jetbrains.kotlin.plugin.spring' version '1.7.22'
    id 'org.sonarqube' version '3.5.0.2730'
    id 'jacoco'
}

group = 'strdcoders'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '17'

repositories {
    mavenCentral()
}

configurations {
    ktlint
}

dependencies {
    ktlint('com.pinterest:ktlint:0.48.0')
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'com.fasterxml.jackson.module:jackson-module-kotlin'
    implementation 'org.jetbrains.kotlin:kotlin-reflect'
    implementation 'org.jetbrains.kotlin:kotlin-stdlib-jdk8'

    // Mysql
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation "mysql:mysql-connector-java"
    implementation "org.liquibase:liquibase-core"
    implementation "org.hibernate.validator:hibernate-validator"

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'

    testImplementation 'org.instancio:instancio-junit:2.6.0'

    // Test Containers
    testImplementation 'org.testcontainers:testcontainers:1.17.6'
    testImplementation 'org.testcontainers:mysql:1.17.6'
    testImplementation 'org.testcontainers:mockserver:1.17.6'
    testImplementation 'org.mock-server:mockserver-client-java:5.15.0'
}

tasks.withType(KotlinCompile) {
    kotlinOptions {
        freeCompilerArgs = ['-Xjsr305=strict']
        jvmTarget = '17'
    }
}

// Format Kotlin code using ktlint
task ktlint(type: JavaExec, group: "verification") {
    description = "Check Kotlin code style."
    classpath = configurations.ktlint
    main = "com.pinterest.ktlint.Main"
    args "src/**/*.kt"
}

test {
    useJUnitPlatform()
    jacocoTestReport {
        reports {
            xml.required = true
            html.outputLocation = layout.buildDirectory.dir('jacocoHtml')
        }
        reports.html.enabled = true
    }
}
sonarqube {
    properties {
        property "sonar.projectKey", "STRDCoders_mss"
        property "sonar.organization", "strdcoders"
        property "sonar.host.url", "https://sonarcloud.io"
        property "sonar.coverage.jacoco.xmlReportPaths", "build/reports/jacoco/test/jacocoTestReport.xml"
    }
}

task installLocalGitHook(type: Copy) {
    from new File(rootProject.rootDir, '.githooks/pre-commit')
    into { new File(rootProject.rootDir, '.git/hooks') }
    fileMode 0775
}

tasks.getByPath(":prepareKotlinBuildScriptModel").dependsOn installLocalGitHook
build.dependsOn installLocalGitHook
jacocoTestReport.dependsOn ktlint
